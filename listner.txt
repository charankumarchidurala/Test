
import java.util.List;
import java.util.Objects;

import org.apache.avro.generic.GenericRecord;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.support.Acknowledgment;
import org.springframework.stereotype.Component;

import com.uhg.optumrx.ms.hemi.framework.converter.AbstractCanonicalKafkaRecordConverter;
import com.uhg.optumrx.ms.hemi.framework.dataservice.AbstractDataService;
import com.uhg.optumrx.ms.hemi.framework.listener.AbstractCanonicalServiceListener;
import com.uhg.optumrx.ms.hemi.item.domain.GpiNdcDocument;
import com.uhg.optumrx.ms.hemi.item.domain.KafkaItem;
import com.uhg.optumrx.ms.hemi.item.service.ProductGpiNdcDataService;
import com.uhg.optumrx.ms.hemi.item.util.ProductGpiNdcRecordConverter;


@Component
public class ProductGpiNdcListener
		extends AbstractCanonicalServiceListener<KafkaItem, GpiNdcDocument> {

	private ProductGpiNdcDataService productGpiNdcDataService;

	private ProductGpiNdcRecordConverter productGpiNdcRecordConverter;

	private static final Logger LOGGER = LogManager.getLogger(ProductGpiNdcListener.class);
	public ProductGpiNdcListener(ProductGpiNdcDataService productGpiNdcDataService,
								 ProductGpiNdcRecordConverter productGpiNdcRecordConverter) {
		this.productGpiNdcDataService = productGpiNdcDataService;
		this.productGpiNdcRecordConverter = productGpiNdcRecordConverter;
	}
	
	 @KafkaListener(id = "${kafka.item.id}", containerFactory = "itemKafkaListenerContainerFactory", topics = "${kafka.item.topic}", groupId = "${kafka.item.group}")
	  @Override
	  public void listenToTopic(List<ConsumerRecord<?, GenericRecord>> consumerRecords, Acknowledgment acknowledgment) {

	    super.listenToTopic(consumerRecords, acknowledgment);
	  }

	  @Override
	  public AbstractCanonicalKafkaRecordConverter<KafkaItem, GpiNdcDocument> getConverter() {
	    return productGpiNdcRecordConverter;
	  }

	  @Override
	  public AbstractDataService<KafkaItem, GpiNdcDocument> getService() {
	    return productGpiNdcDataService;
	  }

	  @Override
	  protected boolean conditionTrueToExclude(KafkaItem kafkaMessage) {
		//orgId != 51, if ndc or gpi are nulll
		  if (!kafkaMessage.getOrganizationId().equalsIgnoreCase("81") || Objects.isNull(kafkaMessage.getDrugCoded()) || ObjectUtils.isEmpty(kafkaMessage.getDrugCoded().getNdc())
				  || ObjectUtils.isEmpty(kafkaMessage.getDrugCoded().getGpi())) {
			  LOGGER.info("This message is skipped due to one of the OrgId, npi, gpi not meeting criteria: " + kafkaMessage);
			  return true;
		  } else {
			  return super.conditionTrueToExclude(kafkaMessage);
		  }
	  }

}